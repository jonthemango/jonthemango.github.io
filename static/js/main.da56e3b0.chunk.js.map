{"version":3,"sources":["logo.svg","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","icon","title","description","App","year","target","rel","href","class","download","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,wFCiB5BC,MAdf,SAAcC,GAGZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAW,QAAUD,EAAME,OAC9B,uBAAGD,UAAU,aAAaD,EAAMG,OAChC,2BAAIH,EAAMI,gBCoBHC,MA1Bf,WAEE,IAAmBC,EAGnB,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,mBAAd,eACA,wBAAIA,UAAU,mBAAd,sBACA,uBAAGA,UAAU,uBAAb,kEAAkG,0BAAMA,UAAU,SAAhB,QAAlG,gDAAkL,0BAAMA,UAAU,SAAhB,OAAlL,8CACA,uBAAGA,UAAU,uBAAb,gBAAgD,uBAAGM,OAAO,SAASC,IAAI,WAAWC,KAAK,iCAAiCC,MAAM,SAA9E,UAAhD,oCACA,uBAAGT,UAAU,uBAAb,eAA+C,uBAAGM,OAAO,SAASC,IAAI,WAAWC,KAAK,2FAA2FE,SAAS,WAAWD,MAAM,SAA5J,MAA/C,KAEA,yBAAKT,UAAU,SACb,kBAAC,EAAD,CAAME,MAAM,iBAAiBC,YAAa,sGAAuGF,KAAK,iBACtJ,kBAAC,EAAD,CAAMC,MAAM,uBAAuBC,YAAa,SAdrCE,EAcyD,MAbnE,IAAIM,MAAOC,cAAgBP,GAaiD,4EAA6EJ,KAAK,qBAC/J,kBAAC,EAAD,CAAMC,MAAM,UAAUC,YAAa,iHAAkHF,KAAK,cAC1J,kBAAC,EAAD,CAAMC,MAAM,eAAeC,YAAa,yHAA0HF,KAAK,qBCX7JY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.da56e3b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './App.css';\n\nfunction Card(props) {\n\n  \n  return (\n    <div className=\"card\">\n      <div className=\"animated fadeIn\">\n        <i className={\"icon \" + props.icon}></i>\n        <p className=\"cardtitle\">{props.title}</p>\n        <p>{props.description}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card';\nimport SidePanel from './SidePanel';\nfunction App() {\n\n  const yearSince = (year) => {\n    return new Date().getFullYear() - year;\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"animated fadeIn\">Jon Mongeau</h1>\n        <h2 className=\"animated fadeIn\">Software Developer</h2>\n        <p className=\"bio animated fadeIn\">I am a passionate software developer interested in the role of <span className=\"hyper\">data</span> in systems of the future. I am a full-stack <span className=\"hyper\">web</span> developer with advanced skills in Python.</p>\n        <p className=\"bio animated fadeIn\">Check out my <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jonthemango\" class=\"hyper\">Github</a> to see what I am working on now</p>\n        <p className=\"bio animated fadeIn\">Download my <a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/jonthemango/jonthemango.github.io/blob/master/mongeau_jon_CV_2019.pdf\" download=\"download\" class=\"hyper\">CV</a>.</p>\n\n        <div className=\"cards\">\n          <Card title=\"Micro Services\" description={\"Experience with building robust microservices. I love using flask or express to build RESTful APIs.\"} icon=\"lni-code-alt\"></Card>\n          <Card title=\"Frontend Development\" description={\"Over \" + yearSince(2012) +  \" years of building beautiful user interfaces. I love using React and Vue.\"} icon=\"lni-radio-button\"></Card>\n          <Card title=\"Dev Ops\" description={\"Code, Build, Test, Release. Experience with AWS, Azure and Firebase. Use of tools like Travis, Git and pytest.\"} icon=\"lni-cloud\"></Card>\n          <Card title=\"Data Science\" description={\"Interest in big data algorithms, machine learning and statistics. Currently studying algorithms for numerical methods.\"} icon=\"lni-database\"></Card>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}